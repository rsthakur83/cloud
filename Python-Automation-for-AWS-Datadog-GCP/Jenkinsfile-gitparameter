pipeline {
    agent { label 'master' }
  

parameters {
    gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH'
  }
stages {
       stage ('Building Frontend Code') {
         
          steps {
            git branch: "${params.BRANCH}", url: 'https://github.com/test/demoFrontEnd.git'

            
            script {
              //bat 'mkdir C:\\portalqa'
              bat 'xcopy /y /E * C:\\portalqa'
              bat 'pushd C:\\portalqa && npm cache clean --force && npm install && ng build --prod --aot=false --build-optimizer=false && cd dist/assets && dir'
	       //bat 'npm install'
         //bat 'ng build --prod --aot=false --build-optimizer=false'     
		}
	    }
	}
       stage('Transferring Frontend Code to Cloudfront') {
          steps {
            script {
              if (params.env == "qaportal") {
	             bat 'echo Copying Frontend Code to S3'
                     powershell 'deployment\\qas3.ps1'
 	     } else if (params.env == "atlantisportal") {
	             bat 'echo Copying Frontend Code to  Altus S3'   
                     powershell 'deployment\\atlantiss3.ps1'
             }
           }
          }
       }
       stage('Cloudfront Invalidation') {
          steps {
            script {
             if (params.env == "qaportal") {
          	     bat 'echo Invalidating S3 Cloudfront Content'
                     powershell 'deployment\\portalqa.ps1'
             } else if (params.env == "atlantisportal") {
        	     bat 'echo Invalidating S3 Cloudfront Content'
                     powershell 'deployment\\portalatlantis.ps1'
              
                }
              }
          }
       }


	stage ('Creating Artifact & Uploading to S3') {
		steps {
		script {
			
                   powershell 'deployment\\artifact.ps1'
		}
	    }
	}

       stage('Clean up Work Space') {
          steps {
             bat 'echo Clean up Work Space'
	    cleanWs()
          }
       }

    }
}
